import openai

# Your OpenAI API key
openai.api_key = "your_api_key_here"

# Define the prompt chain functions
idf_prompts = {
    "initial": lambda location, version: 
        f"Give me a {location} IDF basic template for EnergyPlus version {version}. "
        "Return only IDF code in raw format, without explanation.",
    
    "building_geometry": lambda width, length, height: 
        f"Write the IDF for `BuildingSurface:Detailed` for a {width} ft × {length} ft "
        f"single-story building with a {height} ft height. Return only IDF code.",
    
    "fenestration": lambda window_to_wall_ratio, window_size, wall, door_size, door_location: 
		f"Write the IDF for `FenestrationSurface:Detailed` to add windows with a window-to-wall ratio of "
		f"{window_to_wall_ratio} on the {wall}, with windows of size {window_size}, and a door of size {door_size} at {door_location}. "
		"Return only IDF code.",
    
    "materials": lambda elements: 
        f"Write the IDF for materials and constructions for {', '.join(elements)}. "
        "Return only IDF code.",
    
    "zones": lambda zone_name, heat_set, cool_set: 
        f"Write the IDF for `Zone` and `ZoneControl:Thermostat` for {zone_name} with a "
        f"heating setpoint of {heat_set}°F and a cooling setpoint of {cool_set}°F. Return only IDF code.",
    
    "internal_loads": lambda zone, lighting, people, equipment: 
        f"Write the IDF for `Lights`, `People`, and `ElectricEquipment` in {zone} with:\n"
        f"- Lights: {lighting} W/m²\n"
        f"- People: {people} occupants\n"
        f"- Equipment: {equipment} W/ft²\n"
        "Return only IDF code.",
    
    "hvac": lambda system_type, zone: 
        f"Write the IDF for `HVACTemplate:System:{system_type}` serving {zone}. "
        "Return only IDF code.",
    
    "water_heater": lambda capacity, extra: 
        f"Write the IDF for `WaterHeater:Mixed` with {capacity} gallon capacity and {extra}. "
        "Return only IDF code.",
    
    "outputs": lambda variables: 
        f"Write the IDF for `Output:Variable` and `Output:Meter` to track {', '.join(variables)}. "
        "Return only IDF code.",
    
    "modification": lambda object_name, param, old_value, new_value: 
        f"Modify `{object_name}` to change {param} from {old_value} to {new_value}. "
        "Return only modified IDF code.",
    
    "addition": lambda object_name, details: 
        f"Add `{object_name}` with {details}. Return only IDF code.",
    
    "replacement": lambda old_system, new_system, specs: 
        f"Replace `{old_system}` with `{new_system}` using {specs}. Return only IDF code."
}

# Function to call OpenAI API
def call_llm(prompt):
    response = openai.ChatCompletion.create(
        model="gpt-4",  # Or whichever model you prefer
        messages=[{"role": "user", "content": prompt}]
    )
    return response["choices"][0]["message"]["content"]

# Function to calculate window-to-wall ratio (WWR)
def calculate_window_area(wall_area, wwr, window_size):
    total_window_area = wall_area * wwr
    # Calculate number of windows based on window size
    num_windows = total_window_area / window_size
    return round(num_windows)

# Function to generate full IDF with WWR
def generate_full_idf_with_wwr(location, version, width, length, height, zone, hvac_system_type, wwr, window_size):
    # Step 1: Basic IDF Template
    initial_prompt = idf_prompts["initial"](location, version)
    idf_code = call_llm(initial_prompt)

    # Step 2: Building Geometry
    building_prompt = idf_prompts["building_geometry"](width, length, height)
    building_code = call_llm(building_prompt)
    idf_code += "\n" + building_code

    # Step 3: Calculate Wall Area and Window Area
    wall_area = 2 * (width * height + length * height)  # Assuming all walls are external
    num_windows = calculate_window_area(wall_area, wwr, window_size)
    fenestration_prompt = idf_prompts["fenestration"](num_windows, window_size, "west wall", "3x7 ft", "middle")
    fenestration_code = call_llm(fenestration_prompt)
    idf_code += "\n" + fenestration_code

    # Step 4: Zones and Thermostats
    zone_prompt = idf_prompts["zones"](zone, 68, 72)
    zone_code = call_llm(zone_prompt)
    idf_code += "\n" + zone_code

    # Step 5: HVAC System
    hvac_prompt = idf_prompts["hvac"](hvac_system_type, zone)
    hvac_code = call_llm(hvac_prompt)
    idf_code += "\n" + hvac_code

    # Step 6: Output Variables
    outputs_prompt = idf_prompts["outputs"](["Zone Air Temperature", "Electricity:Facility"])
    outputs_code = call_llm(outputs_prompt)
    idf_code += "\n" + outputs_code

    return idf_code

# Example Usage
location = "Chicago"
version = "23.1"
width = 30
length = 50
height = 10
zone = "Zone1"
hvac_system_type = "Packaged Rooftop Heat Pump"
wwr = 0.25  # Window-to-Wall Ratio (25%)
window_size = 21  # Window size in ft² (e.g., 3x7 ft windows)

# Generate the IDF with WWR
generated_idf_with_wwr = generate_full_idf_with_wwr(location, version, width, length, height, zone, hvac_system_type, wwr, window_size)
print(generated_idf_with_wwr)
